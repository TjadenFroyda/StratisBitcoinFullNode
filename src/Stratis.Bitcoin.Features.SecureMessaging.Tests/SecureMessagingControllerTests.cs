using System;
using NBitcoin;
using Stratis.Bitcoin.Tests.Common.Logging;
using Xunit;

// TODO: Add Logging
// TODO: Add/improve Comments
// TODO: Check coding style guide
// TODO: Safety checks
// TODO: Add tests for valid and invalid model requests for each API endpoint. 
namespace Stratis.Bitcoin.Features.SecureMessaging.Tests
{
	public class SecureMessagingControllerTests : LogsTestBase
	{
		public SecureMessagingControllerTests()
		{
			// TODO: Set up two wallets for Alice and Bob. Will generate a secret key for each 
			// (maybe same ones as SecureMessageTests) for reproducibility. 
		}
		[Fact]
		public void TestGetPrivateKey()
		{
			// TODO: Test retrieving a private key from Alice's wallet via API. 
			// DumpPrivKey is a RPC call. Seeking to avoid RPC based calls as not all nodes 
			// will be running RPC and API is more modern approach.
		}

		[Fact]
		public void TestSharedSecretGeneration()
		{
			// TODO: Test shared address generation using the Bob and Alice's wallet keys.
			// The last unit test demonstrated that we could dump the private keys using the API only (no RPC). 
			// This test will see if the shared secret can be successfully generated.
			// Should work based on testing with SECP256K1 keys but need to make sure that nothing funny 
			// happens when using the HD wallet keys. 
		}

        /// <summary>
        /// Tests the restful APIM essage encryption service.
        /// </summary>
		[Fact]
		public void TestRestfulAPIMessageEncryptionService()
		{
			// TODO: Test Restful API method for message encryption given a provided public key and message. 
			// Nothing gets written to the blockchain with this method, but the encrypted message could be 
			// utilized by third party applications built on top of the node. 
		}

        /// <summary>
        /// Tests the restful APIM essage decryption service.
        /// </summary>
		[Fact]
        public void TestRestfulAPIMessageDecryptionService()
		{
			// TODO: Test Restful API method to message decryption given a provided public key and cipher. 
            // Message could be obtained from any method and is not limited to OP_RETURN. As above, also 
            // potentially useful for a third party application built on top of the node. 
		}

        /// <summary>
        /// Tests the transaction builder.
        /// </summary>
        [Fact]
        public void TestTransactionBuilder()
		{
			// TODO: Set up a transaction and broadcast it. 
			// We want to make sure that the result is a standard message that will be accepted by validators. 
            // In this test we will write a transaction to the testnet blockchain to confirm that sending OP_RETURN
            // messages through the API works. 
            // In summary, message consists of an op_return message sent from either Alice or Bob to a receiving address
			// in a wallet generated by the shared secret. This message will be a short message.             
		}

		[Fact]
        public void TestLongMessageTransactionBuilder()
        {
            // TODO: Set up a long transaction and broadcast it. 
            // Same as above, but with a longer message sent by batching.            
        }
                      
        [Fact]
        public void TestAddSharedWallet()
		{
			// TODO: Test importing shared secret key into wallet. 
            // Will use existing HD wallet functionality to import the shared private key to create a new shared wallet 
			// between Alice and Bob. The wallet should only be used for messaging, with the receiving addresses 
            // potentially being used for new conversations. 
		}

		[Fact]
        public void TestGetSharedAddressHistory()
		{
			// TODO: Test retrieving the transaction history of the shared wallet
            // Method not implemented yet
            // Could use use chainz api to gather transactions from shared address. 
            // Alternatively, could use the wallet API to gather transactions by receiving address. 
			// Each receiving address could be a separate conversation. 
		}

		[Fact]
        public void TestConstructConversationFromSharedAddress()
		{
			// TODO: Uses the shared address to 1) gather op_return messages, 2) construct a 
            // Method not implemented yet
            // Builds on the last test to construct conversations from the gathered op return messages. 
            // If this works, it would be an interesting implemenation of secure messaging on the blockchain. 
            // Granted, there are cheaper secure messaging methods
		}      
    }
}
